/*extern "C" void AEGetParamPtr();
extern "C" void AEInstallEventHandler();
extern "C" void ASN1_item_d2i();
extern "C" void AddDurationToAbsolute();
extern "C" void AddEventTypesToHandler();
extern "C" void AddMediaSample();
extern "C" void AddMovieToStorage();
extern "C" void BIO_free();
extern "C" void BIO_new();
extern "C" void BIO_new_file();
extern "C" void BIO_sock_non_fatal_error();
extern "C" void BackColor();
extern "C" void BeginMediaEdits();
extern "C" void BeginUpdate();
extern "C" void Button();
extern "C" void CDSequenceEnd();
extern "C" void CFAbsoluteTimeGetCurrent();
extern "C" void CFAllocatorGetDefault();
extern "C" void CFArrayGetCount();
extern "C" void CFArrayGetTypeID();
extern "C" void CFArrayGetValueAtIndex();
extern "C" void CFBooleanGetValue();
extern "C" void CFBundleCopyLocalizedString();
extern "C" void CFBundleCopyResourceURL();
extern "C" void CFBundleCopyResourcesDirectoryURL();
extern "C" void CFBundleCreate();
extern "C" void CFBundleGetFunctionPointerForName();
extern "C" void CFBundleGetIdentifier();
extern "C" void CFBundleGetMainBundle();
extern "C" void CFBundleGetValueForInfoDictionaryKey();
extern "C" void CFBundleLoadExecutable();
extern "C" void CFDataCreate();
extern "C" void CFDataGetBytePtr();
extern "C" void CFDataGetBytes();
extern "C" void CFDataGetLength();
extern "C" void CFDataGetTypeID();
extern "C" void CFDateCompare();
extern "C" void CFDateCreate();
extern "C" void CFDateGetTypeID();
extern "C" void CFDictionaryCreateMutable();
extern "C" void CFDictionaryGetCount();
extern "C" void CFDictionaryGetKeysAndValues();
extern "C" void CFDictionaryGetTypeID();
extern "C" void CFDictionaryGetValue();
extern "C" void CFDictionaryGetValueIfPresent();
extern "C" void CFDictionaryRemoveValue();
extern "C" void CFDictionarySetValue();
extern "C" void CFGetTypeID();
extern "C" void CFNumberCreate();
extern "C" void CFNumberGetTypeID();
extern "C" void CFNumberGetValue();
extern "C" void CFPreferencesAppSynchronize();
extern "C" void CFPreferencesCopyAppValue();
extern "C" void CFPreferencesGetAppBooleanValue();
extern "C" void CFPreferencesGetAppIntegerValue();
extern "C" void CFPreferencesSetAppValue();
extern "C" void CFPropertyListCreateFromXMLData();
extern "C" void CFRelease();
extern "C" void CFRetain();
extern "C" void CFStringAppend();
extern "C" void CFStringAppendFormatAndArguments();
extern "C" void CFStringCompare();
extern "C" void CFStringConvertEncodingToWindowsCodepage();
extern "C" void CFStringConvertWindowsCodepageToEncoding();
extern "C" void CFStringCreateArrayBySeparatingStrings();
extern "C" void CFStringCreateCopy();
extern "C" void CFStringCreateMutable();
extern "C" void CFStringCreateMutableCopy();
extern "C" void CFStringCreateWithBytes();
extern "C" void CFStringCreateWithCString();
extern "C" void CFStringCreateWithCStringNoCopy();
extern "C" void CFStringCreateWithCharacters();
extern "C" void CFStringCreateWithCharactersNoCopy();
extern "C" void CFStringCreateWithFormat();
extern "C" void CFStringFind();
extern "C" void CFStringGetBytes();
extern "C" void CFStringGetCString();
extern "C" void CFStringGetCharacters();
extern "C" void CFStringGetIntValue();
extern "C" void CFStringGetLength();
extern "C" void CFStringGetMaximumSizeForEncoding();
extern "C" void CFStringGetTypeID();
extern "C" void CFStringLowercase();
extern "C" void CFStringReplace();
extern "C" void CFURLCopyFileSystemPath();
extern "C" void CFURLCreateCopyAppendingPathComponent();
extern "C" void CFURLCreateDataAndPropertiesFromResource();
extern "C" void CFURLCreateFromFSRef();
extern "C" void CFURLCreateFromFileSystemRepresentation();
extern "C" void CFURLCreateWithFileSystemPath();
extern "C" void CFURLCreateWithString();
extern "C" void CFURLGetFSRef();
extern "C" void CFURLGetFileSystemRepresentation();
extern "C" void CFUUIDCreate();
extern "C" void CFUUIDGetUUIDBytes();
extern "C" void CGAcquireDisplayFadeReservation();
extern "C" void CGAffineTransformScale();
extern "C" void CGAssociateMouseAndMouseCursorPosition();
extern "C" void CGCaptureAllDisplays();
extern "C" void CGContextFillRect();
extern "C" void CGContextRelease();
extern "C" void CGContextRestoreGState();
extern "C" void CGContextSaveGState();
extern "C" void CGContextSelectFont();
extern "C" void CGContextSetRGBFillColor();
extern "C" void CGContextSetRGBStrokeColor();
extern "C" void CGContextSetTextMatrix();
extern "C" void CGContextStrokeRect();
extern "C" void CGContextStrokeRectWithWidth();
extern "C" void CGCursorIsVisible();
extern "C" void CGDisplayAvailableModes();
extern "C" void CGDisplayBestModeForParameters();
extern "C" void CGDisplayBestModeForParametersAndRefreshRate();
extern "C" void CGDisplayBestModeForParametersAndRefreshRateWithProperty();
extern "C" void CGDisplayBitsPerPixel();
extern "C" void CGDisplayBounds();
extern "C" void CGDisplayCurrentMode();
extern "C" void CGDisplayFade();
extern "C" void CGDisplayIDToOpenGLDisplayMask();
extern "C" void CGDisplayIOServicePort();
extern "C" void CGDisplayIsCaptured();
extern "C" void CGDisplayMoveCursorToPoint();
extern "C" void CGDisplayPixelsHigh();
//extern "C" void CGDisplayPixelsWide();
extern "C" void CGDisplaySwitchToMode();
extern "C" void CGGetActiveDisplayList();
extern "C" void CGGetDisplayTransferByTable();
extern "C" void CGGetDisplaysWithOpenGLDisplayMask();
extern "C" void CGGetDisplaysWithPoint();
extern "C" void CGLEnable();
extern "C" void CGMainDisplayID();
extern "C" void CGRectContainsRect();
extern "C" void CGRectGetMaxX();
extern "C" void CGRectGetMaxY();
extern "C" void CGRectGetMinX();
extern "C" void CGRectGetMinY();
extern "C" void CGRectInset();
extern "C" void CGRectOffset();
extern "C" void CGReleaseAllDisplays();
extern "C" void CGReleaseDisplayFadeReservation();
extern "C" void CGSetDisplayTransferByTable();
extern "C" void CGSetLocalEventsSuppressionInterval();
extern "C" void CGWarpMouseCursorPosition();
extern "C" void CSCopyMachineName();
extern "C" void CSCopyUserName();
extern "C" void CallMeWhen();
extern "C" void CallNextEventHandler();
extern "C" void CancelCallBack();
extern "C" void ClipRect();
extern "C" void CloseMovieStorage();
extern "C" void ClosePicture();
extern "C" void CompressSequenceBegin();
extern "C" void CompressSequenceFrame();
extern "C" void CopyBits();
extern "C" void CopyMenuItemTextAsCFString();
extern "C" void CopyWindowTitleAsCFString();
extern "C" void CountMenuItems();
extern "C" void CreateCGContextForPort();
extern "C" void CreateEvent();
extern "C" void CreateMovieStorage();
extern "C" void CreateNewPort();
extern "C" void CreateNewPortForCGDisplayID();
extern "C" void CreateNewWindow();
extern "C" void CreateNibReferenceWithCFBundle();
extern "C" void CreateStandardAlert();
extern "C" void CreateWindowFromNib();
extern "C" void DMGetDeskRegion();
extern "C" void DMGetDisplayIDByGDevice();
extern "C" void DMGetGDeviceByDisplayID();
extern "C" void DebugStr();
extern "C" void DeleteMenuItems();
extern "C" void DisableControl();
extern "C" void DisableMenuItem();
extern "C" void DisposeCTable();
extern "C" void DisposeCallBack();
extern "C" void DisposeControlUserPaneDrawUPP();
extern "C" void DisposeControlUserPaneHitTestUPP();
extern "C" void DisposeControlUserPaneTrackingUPP();
extern "C" void DisposeEventHandlerUPP();
extern "C" void DisposeEventLoopTimerUPP();
extern "C" void DisposeFNSubscriptionUPP();
extern "C" void DisposeGWorld();
extern "C" void DisposeHandle();
extern "C" void DisposeMovie();
extern "C" void DisposeNibReference();
extern "C" void DisposePort();
extern "C" void DisposePtr();
extern "C" void DisposeRgn();
extern "C" void DisposeSndCallBackUPP();
extern "C" void DisposeWindow();
extern "C" void Draw1Control();
extern "C" void DrawThemeTextBox();
extern "C" void EmptyRect();
extern "C" void EmptyRgn();
extern "C" void EnableControl();
extern "C" void EnableMenuItem();
extern "C" void EndMediaEdits();
extern "C" void EndUpdate();
extern "C" void EnterMovies();
extern "C" void EqualRect();
extern "C" void FMGetFontFamilyFromName();
extern "C" void FMGetFontFamilyName();
extern "C" void FNSubscribeByPath();
extern "C" void FNUnsubscribe();
extern "C" void FSClose();
extern "C" void FSCloseFork();
extern "C" void FSCloseIterator();
extern "C" void FSCompareFSRefs();
extern "C" void FSCreateFileUnicode();
extern "C" void FSDeleteObject();
extern "C" void FSFindFolder();
extern "C" void FSFlushFork();
extern "C" void FSGetCatalogInfo();
extern "C" void FSGetCatalogInfoBulk();
extern "C" void FSGetDataForkName();
extern "C" void FSGetForkPosition();
extern "C" void FSGetForkSize();
extern "C" void FSGetVolumeInfo();
extern "C" void FSMakeFSRefUnicode();
extern "C" void FSOpenFork();
extern "C" void FSOpenIterator();
extern "C" void FSPathMakeRef();
extern "C" void FSReadFork();
extern "C" void FSRefMakePath();
extern "C" void FSRenameUnicode();
extern "C" void FSSetCatalogInfo();
extern "C" void FSSetForkPosition();
extern "C" void FSSetForkSize();
extern "C" void FSWrite();
extern "C" void FSWriteFork();
extern "C" void FSpGetFInfo();
extern "C" void FSpOpenDF();
extern "C" void FSpRstFLock();
extern "C" void FSpSetFLock();
extern "C" void FillRect();
extern "C" void FindFolder();
extern "C" void FindNextComponent();
extern "C" void FindWindow();
extern "C" void Fix2X();
extern "C" void FixRatio();
extern "C" void FlushEventQueue();
extern "C" void FlushEvents();
extern "C" void ForeColor();
extern "C" void FrameRect();
extern "C" void FrontWindow();
//extern "C" void Gestalt();
extern "C" void GetAppFont();
extern "C" void GetApplicationEventTarget();
extern "C" void GetBackColor();
extern "C" void GetCPixel();
extern "C" void GetCTable();
extern "C" void GetClip();
extern "C" void GetCodecNameList();
extern "C" void GetControlBounds();
extern "C" void GetControlByID();
extern "C" void GetControlData();
extern "C" void GetControlEventTarget();
extern "C" void GetControlPopupMenuHandle();
extern "C" void GetControlValue();
extern "C" void GetCurrentEventButtonState();
extern "C" void GetCurrentEventLoop();
extern "C" void GetCurrentEventQueue();
extern "C" void GetCurrentEventTime();
extern "C" void GetCurrentProcess();
extern "C" void GetCurrentThread();
extern "C" void GetDateTime();
extern "C" void GetDeviceList();
extern "C" void GetEventClass();
extern "C" void GetEventDispatcherTarget();
extern "C" void GetEventKind();
extern "C" void GetEventParameter();
extern "C" void GetFontInfo();
extern "C" void GetForeColor();
extern "C" void GetFrontProcess();
extern "C" void GetGWorld();
extern "C" void GetGWorldDevice();
extern "C" void GetGWorldPixMap();
extern "C" void GetGlobalMouse();
extern "C" void GetGrayRgn();
extern "C" void GetHandleSize();
extern "C" void GetIndMenuItemWithCommandID();
extern "C" void GetIntlResource();
extern "C" void GetKeys();
extern "C" void GetMBarHeight();
extern "C" void GetMainDevice();
extern "C" void GetMainEventQueue();
extern "C" void GetMaxCompressionSize();
extern "C" void GetMediaDuration();
extern "C" void GetMenuEventTarget();
extern "C" void GetMenuItemProperty();
extern "C" void GetMouse();
extern "C" void GetMovieBox();
extern "C" void GetMovieDuration();
extern "C" void GetMovieTimeBase();
extern "C" void GetMovieTimeScale();
extern "C" void GetMoviesError();
extern "C" void GetNextDevice();
extern "C" void GetNextProcess();
extern "C" void GetNextWindow();
extern "C" void GetPenState();
extern "C" void GetPixBaseAddr();
extern "C" void GetPixBounds();
extern "C" void GetPixRowBytes();
extern "C" void GetPort();
extern "C" void GetPortBounds();
extern "C" void GetPortForeColor();
extern "C" void GetPortPixMap();
extern "C" void GetPortTextFace();
extern "C" void GetPortTextFont();
extern "C" void GetPortVisibleRegion();
extern "C" void GetProcessBundleLocation();
extern "C" void GetProcessInformation();
extern "C" void GetProcessPID();
extern "C" void GetQDGlobalsBlack();
extern "C" void GetQDGlobalsDarkGray();
extern "C" void GetQDGlobalsGray();
extern "C" void GetQDGlobalsLightGray();
extern "C" void GetQDGlobalsWhite();
extern "C" void GetRegionBounds();
extern "C" void GetResource();
extern "C" void GetScriptManagerVariable();
extern "C" void GetStandardAlertDefaultParams();
extern "C" void GetThemeTextDimensions();
extern "C" void GetThreadState();
extern "C" void GetWRefCon();
extern "C" void GetWindowBounds();
extern "C" void GetWindowEventTarget();
extern "C" void GetWindowFromPort();
extern "C" void GetWindowGreatestAreaDevice();
extern "C" void GetWindowPort();
extern "C" void GetWindowProperty();
extern "C" void GetWindowRegion();
extern "C" void GlobalToLocal();
extern "C" void GoToBeginningOfMovie();
extern "C" void GoToEndOfMovie();
extern "C" void HGetVol();
extern "C" void HIObjectCreate();
extern "C" void HIObjectRegisterSubclass();
extern "C" void HIScrollViewCreate();
extern "C" void HITextViewCreate();
extern "C" void HITextViewGetTXNObject();
extern "C" void HIViewAddSubview();
extern "C" void HIViewFindByID();
extern "C" void HIViewGetBounds();
extern "C" void HIViewGetRoot();
extern "C" void HIViewSetBoundsOrigin();
extern "C" void HIViewSetFrame();
extern "C" void HIViewSetNeedsDisplay();
extern "C" void HIViewSetVisible();
extern "C" void HLock();
extern "C" void HSetVol();
extern "C" void HUnlock();
extern "C" void HideCursor();
extern "C" void HideMenuBar();
extern "C" void HideSheetWindow();
extern "C" void HideWindow();
extern "C" void IOBSDNameMatching();
extern "C" void IOIteratorNext();
extern "C" void IOMasterPort();
extern "C" void IOObjectConformsTo();
extern "C" void IOObjectGetClass();
extern "C" void IOObjectRelease();
extern "C" void IOObjectRetain();
extern "C" void IORegistryEntryCreateCFProperty();
extern "C" void IORegistryEntryCreateIterator();
extern "C" void IORegistryEntryFromPath();
extern "C" void IORegistryEntryGetChildEntry();
extern "C" void IORegistryEntryGetParentEntry();
extern "C" void IORegistryEntryGetPath();
extern "C" void IOServiceGetMatchingServices();
extern "C" void IOServiceNameMatching();
extern "C" void InitCursor();
extern "C" void InsertMediaIntoTrack();
extern "C" void InsertMenuItemTextWithCFString();
extern "C" void InsetRect();
extern "C" void InstallEventHandler();
extern "C" void InstallEventLoopTimer();
extern "C" void InvalWindowRect();
extern "C" void IsMenuBarVisible();
extern "C" void IsMenuItemEnabled();
extern "C" void IsMovieDone();
extern "C" void IsWindowCollapsed();
extern "C" void IsWindowVisible();
extern "C" void KeyTranslate();
extern "C" void KillPicture();
extern "C" void LSOpenCFURLRef();
extern "C" void LineTo();
extern "C" void LocalToGlobal();
extern "C" void LockPixels();
extern "C" void Long2Fix();
extern "C" void LongDateToSeconds();
extern "C" void LongSecondsToDate();
extern "C" void MPAllocateAligned();
extern "C" void MPDelayUntil();
extern "C" void MPFree();
extern "C" void MPProcessors();
extern "C" void MemError();
//extern "C" void Microseconds();
extern "C" void MoveHHi();
extern "C" void MoveTo();
extern "C" void MoviesTask();
extern "C" void NewAEEventHandlerUPP();
extern "C" void NewCWindow();
extern "C" void NewCallBack();
extern "C" void NewControlUserPaneDrawUPP();
extern "C" void NewControlUserPaneHitTestUPP();
extern "C" void NewControlUserPaneTrackingUPP();
extern "C" void NewEventHandlerUPP();
extern "C" void NewEventLoopTimerUPP();
extern "C" void NewFNSubscriptionUPP();
extern "C" void NewGWorld();
extern "C" void NewHandle();
extern "C" void NewIOCompletionUPP();
extern "C" void NewMovieFromDataRef();
extern "C" void NewMovieTrack();
extern "C" void NewRgn();
extern "C" void NewSndCallBackUPP();
extern "C" void NewThreadEntryUPP();
extern "C" void NewThreadTerminationUPP();
extern "C" void NewTrackMedia();
extern "C" void OBJ_nid2sn();
extern "C" void OBJ_obj2nid();
extern "C" void OTAtomicAdd32();
extern "C" void OTCompareAndSwap32();
extern "C" void OffsetRect();
extern "C" void OpenCPicture();
extern "C" void PBHGetVInfoSync();
extern "C" void PBHGetVolParmsSync();
extern "C" void PBMakeFSRefSync();
extern "C" void PBReadForkAsync();
extern "C" void PBWriteForkAsync();
extern "C" void PEM_read_bio_DHparams();
extern "C" void PaintRect();
extern "C" void PenNormal();
extern "C" void PenSize();
extern "C" void PostEventToQueue();
extern "C" void PrerollMovie();
extern "C" void PtInRect();
extern "C" void PtrToHand();
extern "C" void QDIsNamedPixMapCursorRegistered();
extern "C" void QDRegisterNamedPixMapCursor();
extern "C" void QDSetNamedPixMapCursor();
extern "C" void QDUnregisterNamedPixMapCursur();
extern "C" void QTNewDataReferenceFromFSRef();
extern "C" void QTNewDataReferenceFromFullPathCFString();
extern "C" void QTNewGWorldFromPtr();
extern "C" void QuitAppModalLoopForWindow();
extern "C" void QuitApplicationEventLoop();
extern "C" void RGBBackColor();
extern "C" void RGBForeColor();
extern "C" void ReadLocation();
extern "C" void ReceiveNextEvent();
extern "C" void ReleaseEvent();
extern "C" void ReleaseResource();
extern "C" void RemoveEventHandler();
extern "C" void RemoveEventLoopTimer();
extern "C" void RemoveEventTypesFromHandler();
extern "C" void RepositionWindow();
extern "C" void RunAppModalLoopForWindow();
extern "C" void RunApplicationEventLoop();
extern "C" void RunStandardAlert();
extern "C" void SameProcess();
extern "C" void ScaleMatrix();
extern "C" void SecondsToDate();
extern "C" void SelectWindow();
extern "C" void SendBehind();
extern "C" void SendEventToEventTarget();
extern "C" void SetClip();
extern "C" void SetControlData();
extern "C" void SetControlID();
extern "C" void SetControlMaximum();
extern "C" void SetControlValue();
extern "C" void SetEOF();
extern "C" void SetEventParameter();
extern "C" void SetFPos();
extern "C" void SetFrontProcess();
extern "C" void SetGDevice();
extern "C" void SetGWorld();
extern "C" void SetHandleSize();
extern "C" void SetIdentityMatrix();
extern "C" void SetMenuBarFromNib();
extern "C" void SetMenuItemProperty();
extern "C" void SetMenuItemTextWithCFString();
extern "C" void SetMovieActive();
extern "C" void SetMovieActiveSegment();
extern "C" void SetMovieBox();
extern "C" void SetMovieGWorld();
extern "C" void SetOrigin();
extern "C" void SetPenState();
extern "C" void SetPort();
extern "C" void SetPortBounds();
extern "C" void SetPortWindowPort();
extern "C" void SetQDGlobalsRandomSeed();
extern "C" void SetRect();
extern "C" void SetThemeCursor();
extern "C" void SetThreadTerminator();
extern "C" void SetTrackMatrix();
extern "C" void SetWRefCon();
extern "C" void SetWindowBounds();
extern "C" void SetWindowContentColor();
extern "C" void SetWindowModified();
extern "C" void SetWindowProperty();
extern "C" void SetWindowProxyCreatorAndType();
extern "C" void SetWindowTitleWithCFString();
extern "C" void ShowCursor();
extern "C" void ShowMenuBar();
extern "C" void ShowSheetWindow();
extern "C" void ShowWindow();
extern "C" void SndChannelStatus();
extern "C" void SndDisposeChannel();
extern "C" void SndDoCommand();
extern "C" void SndDoImmediate();
extern "C" void SndNewChannel();
extern "C" void SndPlay();
extern "C" void StartMovie();
extern "C" void StopMovie();
extern "C" void SysBeep();
extern "C" void TXNDeleteObject();
extern "C" void TXNGetDataEncoded();
extern "C" void TXNGetHIRect();
extern "C" void TXNInitTextension();
extern "C" void TXNNewObject();
extern "C" void TXNSetDataFromCFURLRef();
extern "C" void TXNSetDataFromFile();
extern "C" void TXNSetHIRectBounds();
extern "C" void TestDeviceAttribute();
extern "C" void TextFace();
extern "C" void TextFont();
extern "C" void TextSize();
//extern "C" void ThreadBeginCritical();
//extern "C" void ThreadEndCritical();
extern "C" void TickCount();
extern "C" void TranslateMatrix();
extern "C" void UnlockPixels();
extern "C" void UpTime();
extern "C" void ValidWindowRect();
extern "C" void WaitNextEvent();
extern "C" void X2Fix();
extern "C" void X509V3_EXT_get();
extern "C" void X509_EXTENSION_get_object();
extern "C" void X509_NAME_get_text_by_NID();
extern "C" void X509_NAME_oneline();
extern "C" void X509_STORE_CTX_get_current_cert();
extern "C" void X509_STORE_CTX_get_error();
extern "C" void X509_STORE_CTX_get_error_depth();
extern "C" void X509_free();
extern "C" void X509_get_ext();
extern "C" void X509_get_ext_count();
extern "C" void X509_get_issuer_name();
extern "C" void X509_get_subject_name();
extern "C" void X509_verify_cert_error_string();
extern "C" void YieldToAnyThread();*/
extern "C" void RAND_seed();
extern "C" void _Unwind_Resume();
extern "C" void _ZN9__gnu_cxx12__atomic_addEPVii();
extern "C" void _ZN9__gnu_cxx18__exchange_and_addEPVii();
extern "C" void _ZNKSbIwSt11char_traitsIwESaIwEE5rfindEwj();
extern "C" void _ZNKSbIwSt11char_traitsIwESaIwEE7compareEPKw();
extern "C" void _ZNKSs12find_last_ofEPKcj();
extern "C" void _ZNKSs12find_last_ofERKSsj();
extern "C" void _ZNKSs13find_first_ofEPKcj();
extern "C" void _ZNKSs13find_first_ofERKSsj();
extern "C" void _ZNKSs16find_last_not_ofEPKcj();
extern "C" void _ZNKSs17find_first_not_ofEPKcj();
extern "C" void _ZNKSs17find_first_not_ofEcj();
extern "C" void _ZNKSs3endEv();
extern "C" void _ZNKSs4copyEPcjj();
extern "C" void _ZNKSs4findEPKcj();
extern "C" void _ZNKSs4findEPKcjj();
extern "C" void _ZNKSs4findERKSsj();
extern "C" void _ZNKSs4findEcj();
extern "C" void _ZNKSs4rendEv();
extern "C" void _ZNKSs5beginEv();
extern "C" void _ZNKSs5rfindEPKcj();
extern "C" void _ZNKSs5rfindEPKcjj();
extern "C" void _ZNKSs5rfindEcj();
extern "C" void _ZNKSs6rbeginEv();
extern "C" void _ZNKSs6substrEjj();
extern "C" void _ZNKSs7_M_iendEv();
extern "C" void _ZNKSs7compareEPKc();
extern "C" void _ZNKSs7compareERKSs();
extern "C" void _ZNKSs7compareEjjPKc();
extern "C" void _ZNKSs7compareEjjRKSs();
extern "C" void _ZNKSs9_M_ibeginEv();
extern "C" void _ZNKSt13basic_filebufIcSt11char_traitsIcEE7is_openEv();
extern "C" void _ZNKSt9basic_iosIcSt11char_traitsIcEE3eofEv();
extern "C" void _ZNSaIcEC2ERKS_();
extern "C" void _ZNSaIcEC2Ev();
extern "C" void _ZNSaIcED2Ev();
extern "C" void _ZNSaIwEC2ERKS_();
extern "C" void _ZNSaIwEC2Ev();
extern "C" void _ZNSaIwED2Ev();
extern "C" void _ZNSbIwSt11char_traitsIwESaIwEE4swapERS2_();
extern "C" void _ZNSbIwSt11char_traitsIwESaIwEE6assignEPKw();
extern "C" void _ZNSbIwSt11char_traitsIwESaIwEE6assignEPKwj();
extern "C" void _ZNSbIwSt11char_traitsIwESaIwEEC2Ev();
extern "C" void _ZNSbIwSt11char_traitsIwESaIwEED2Ev();
extern "C" void _ZNSi3getEPcic();
extern "C" void _ZNSi4readEPci();
extern "C" void _ZNSi6ignoreEi();
extern "C" void _ZNSirsERd();
extern "C" void _ZNSirsERf();
extern "C" void _ZNSirsERl();
extern "C" void _ZNSirsERm();
extern "C" void _ZNSirsERs();
extern "C" void _ZNSirsERt();
extern "C" void _ZNSo5flushEv();
extern "C" void _ZNSo5writeEPKci();
extern "C" void _ZNSolsEd();
extern "C" void _ZNSolsEi();
extern "C" void _ZNSolsEl();
extern "C" void _ZNSolsEm();
extern "C" void _ZNSolsEs();
extern "C" void _ZNSs12_Alloc_hiderC2EPcRKSaIcE();
extern "C" void _ZNSs12_S_constructEjcRKSaIcE();
extern "C" void _ZNSs2atEj();
extern "C" void _ZNSs3endEv();
extern "C" void _ZNSs4rendEv();
extern "C" void _ZNSs4swapERSs();
extern "C" void _ZNSs5beginEv();
extern "C" void _ZNSs5clearEv();
extern "C" void _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_();
extern "C" void _ZNSs5eraseEjj();
extern "C" void _ZNSs6appendEPKc();
extern "C" void _ZNSs6appendEPKcj();
extern "C" void _ZNSs6appendERKSs();
extern "C" void _ZNSs6appendERKSsjj();
extern "C" void _ZNSs6appendEjc();
extern "C" void _ZNSs6assignEPKc();
extern "C" void _ZNSs6assignEPKcj();
extern "C" void _ZNSs6assignERKSs();
extern "C" void _ZNSs6assignERKSsjj();
extern "C" void _ZNSs6assignEjc();
extern "C" void _ZNSs6insertEjPKc();
extern "C" void _ZNSs6insertEjPKcj();
extern "C" void _ZNSs6insertEjRKSs();
extern "C" void _ZNSs6insertEjjc();
extern "C" void _ZNSs6rbeginEv();
extern "C" void _ZNSs6resizeEjc();
extern "C" void _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_();
extern "C" void _ZNSs7replaceEjjPKc();
extern "C" void _ZNSs7replaceEjjRKSs();
extern "C" void _ZNSs7reserveEj();
extern "C" void _ZNSs9push_backEc();
extern "C" void _ZNSsC1EPKcRKSaIcE();
extern "C" void _ZNSsC1EPKcjRKSaIcE();
extern "C" void _ZNSsC1ERKSs();
extern "C" void _ZNSsC1ERKSsjj();
extern "C" void _ZNSsC1EjcRKSaIcE();
extern "C" void _ZNSsC2EPKcRKSaIcE();
extern "C" void _ZNSsC2EPKcjRKSaIcE();
extern "C" void _ZNSsC2ERKSs();
extern "C" void _ZNSsC2ERKSsjj();
extern "C" void _ZNSsC2EjcRKSaIcE();
extern "C" void _ZNSsC2Ev();
extern "C" void _ZNSsD2Ev();
extern "C" void _ZNSsixEj();
extern "C" void _ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode();
extern "C" void _ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev();
extern "C" void _ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode();
extern "C" void _ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv();
extern "C" void _ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode();
extern "C" void _ZNSt14basic_ofstreamIcSt11char_traitsIcEEC2Ev();
extern "C" void _ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev();
extern "C" void _ZNSt14basic_ofstreamIcSt11char_traitsIcEED2Ev();
extern "C" void _ZNSt15_List_node_base4hookEPS_();
extern "C" void _ZNSt15_List_node_base4swapERS_S0_();
extern "C" void _ZNSt15_List_node_base6unhookEv();
extern "C" void _ZNSt15_List_node_base7reverseEv();
extern "C" void _ZNSt15_List_node_base8transferEPS_S0_();
extern "C" void _ZNSt8ios_base4InitC1Ev();
extern "C" void _ZNSt8ios_base4InitD1Ev();
extern "C" void _ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate();
extern "C" void _ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev();
extern "C" void _ZNSt9basic_iosIcSt11char_traitsIcEED2Ev();
extern "C" void _ZSt13set_terminatePFvvE();
extern "C" void _ZSt17__throw_bad_allocv();
extern "C" void _ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base();
extern "C" void _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base();
extern "C" void _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base();
extern "C" void _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base();
extern "C" void _ZSt19__throw_logic_errorPKc();
extern "C" void _ZSt20__throw_length_errorPKc();
extern "C" void _ZSt20__throw_out_of_rangePKc();
extern "C" void _ZSt22__throw_overflow_errorPKc();
extern "C" void _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_();
extern "C" void _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_();
extern "C" void _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_();
extern "C" void _ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_();
extern "C" void _ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E();
extern "C" void _ZSt9terminatev();
extern "C" void _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc();
extern "C" void _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E();
extern "C" void _ZStrsISt11char_traitsIcEERSt13basic_istreamIcT_ES5_Ra();
extern "C" void _ZStrsISt11char_traitsIcEERSt13basic_istreamIcT_ES5_Rh();
extern "C" void _ZStrsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_RS3_();
extern "C" void _ZdaPv();
extern "C" void _ZdlPv();
extern "C" void _ZdlPvRKSt9nothrow_t();
extern "C" void _Znaj();
extern "C" void* _Znwj(unsigned int size);
extern "C" void _ZnwjRKSt9nothrow_t();
extern "C" void __cxa_allocate_exception();
extern "C" void __cxa_bad_typeid();
//extern "C" void __cxa_begin_catch();
//extern "C" void __cxa_call_unexpected();
extern "C" void __cxa_end_catch();
extern "C" void __cxa_free_exception();
//extern "C" void __cxa_guard_abort();
/*extern "C" void __cxa_guard_acquire();
extern "C" void __cxa_guard_release();*/
extern "C" void __cxa_rethrow();
extern "C" void __cxa_throw();
extern "C" void __divdi3();
extern "C" void __dynamic_cast();
//extern "C" void __error();
//extern "C" void __fpclassifyf();
extern "C" void __keymgr_dwarf2_register_sections();
extern "C" void __maskrune();
extern "C" void __tolower();
extern "C" void __toupper();
//extern "C" void __udivdi3();
extern "C" void __umoddi3();
//extern "C" void _exit();
extern "C" void _keymgr_get_and_lock_processwide_ptr();
extern "C" void _keymgr_get_and_lock_processwide_ptr_2();
extern "C" void _keymgr_set_and_unlock_processwide_ptr();
//extern "C" void abort();
extern "C" void accept();
//extern "C" void acos();
//extern "C" void acosf();
extern "C" void aglChoosePixelFormat();
extern "C" void aglCreateContext();
extern "C" void aglDescribeRenderer();
extern "C" void aglDestroyContext();
extern "C" void aglDestroyPixelFormat();
extern "C" void aglDestroyRendererInfo();
extern "C" void aglGetCGLContext();
extern "C" void aglGetCurrentContext();
extern "C" void aglGetDrawable();
extern "C" void aglGetInteger();
extern "C" void aglNextRendererInfo();
extern "C" void aglQueryRendererInfo();
extern "C" void aglSetCurrentContext();
extern "C" void aglSetDrawable();
extern "C" void aglSetFullScreen();
extern "C" void aglSwapBuffers();
extern "C" void aglUpdateContext();
//extern "C" void asin();
//extern "C" void asinf();
/*extern "C" void atan();
extern "C" void atan2();
extern "C" void atan2f();
extern "C" void atanf();*/
/*extern "C" void atof();
extern "C" void atoi();
extern "C" void atol();*/
extern "C" void bind();
//extern "C" void bsearch();
extern "C" void c2pstrcpy();
//extern "C" void calloc();
/*extern "C" void ceil();
extern "C" void ceilf();*/
//extern "C" void clock();
//extern "C" void close();
extern "C" void connect();
/*extern "C" void cos();
extern "C" void cosf();*/
//extern "C" void ctime();
//extern "C" void difftime();
/*extern "C" void dlopen();
extern "C" void dlsym();*/
extern "C" void dtox80();
//extern "C" void exp();
//extern "C" void expf();
/*extern "C" void fclose();
extern "C" void fcvt();
extern "C" void feof();
extern "C" void ferror();
extern "C" void fflush();
extern "C" void fgetpos();*/
//extern "C" void floor();
//extern "C" void floorf();
//extern "C" void fmod();
/*extern "C" void fprintf();
extern "C" void fputc();
extern "C" void fputs();
extern "C" void fread();
extern "C" void free();*/
extern "C" void freeifaddrs();
//extern "C" void frexp();
/*extern "C" void fscanf();
extern "C" void fseek();
extern "C" void ftell();
extern "C" void fwrite();
extern "C" void getc();
extern "C" void getcwd();
extern "C" void getenv();*/
extern "C" void gethostbyname();
//extern "C" void gethostname();
extern "C" void getifaddrs();
extern "C" void getpeername();
//extern "C" void getpid();
extern "C" void getrlimit();
extern "C" void getsockname();
extern "C" void getsockopt();
extern "C" void gettimeofday();
extern "C" void glActiveTexture();
extern "C" void glAlphaFunc();
extern "C" void glBegin();
extern "C" void glBindBufferARB();
extern "C" void glBindProgramARB();
extern "C" void glBindTexture();
extern "C" void glBlendEquation();
extern "C" void glBlendFunc();
extern "C" void glBufferDataARB();
extern "C" void glBufferParameteriAPPLE();
extern "C" void glBufferSubDataARB();
extern "C" void glClear();
extern "C" void glClearColor();
extern "C" void glClearDepth();
extern "C" void glClearStencil();
extern "C" void glClientActiveTexture();
extern "C" void glColor4f();
extern "C" void glColor4fv();
extern "C" void glColor4ubv();
extern "C" void glColorMask();
extern "C" void glColorMaterial();
extern "C" void glColorPointer();
extern "C" void glCompressedTexImage2DARB();
extern "C" void glCompressedTexImage3DARB();
extern "C" void glCompressedTexSubImage2DARB();
extern "C" void glCopyPixels();
extern "C" void glCopyTexSubImage2D();
extern "C" void glDeleteBuffersARB();
extern "C" void glDeleteProgramsARB();
extern "C" void glDeleteTextures();
extern "C" void glDepthFunc();
extern "C" void glDepthMask();
extern "C" void glDepthRange();
extern "C" void glDisable();
extern "C" void glDisableClientState();
extern "C" void glDisableVertexAttribArrayARB();
extern "C" void glDrawArrays();
extern "C" void glDrawBuffer();
extern "C" void glDrawElements();
extern "C" void glDrawRangeElements();
extern "C" void glEnable();
extern "C" void glEnableClientState();
extern "C" void glEnableVertexAttribArrayARB();
extern "C" void glEnd();
extern "C" void glFinish();
extern "C" void glFlushMappedBufferRangeAPPLE();
extern "C" void glFogf();
extern "C" void glFogfv();
extern "C" void glFogi();
extern "C" void glFrontFace();
extern "C" void glGenBuffersARB();
extern "C" void glGenProgramsARB();
extern "C" void glGenTextures();
extern "C" void glGetBooleanv();
extern "C" void glGetCompressedTexImageARB();
extern "C" void glGetError();
extern "C" void glGetFloatv();
extern "C" void glGetIntegerv();
extern "C" void glGetProgramivARB();
extern "C" void glGetString();
extern "C" void glGetTexEnvfv();
extern "C" void glGetTexEnviv();
extern "C" void glGetTexParameteriv();
extern "C" void glHint();
extern "C" void glIsEnabled();
extern "C" void glLightModelfv();
extern "C" void glLightModeli();
extern "C" void glLightf();
extern "C" void glLightfv();
extern "C" void glLoadIdentity();
extern "C" void glLoadMatrixf();
extern "C" void glMapBufferARB();
extern "C" void glMaterialf();
extern "C" void glMaterialfv();
extern "C" void glMatrixMode();
extern "C" void glMultMatrixf();
extern "C" void glMultiTexCoord4fARB();
extern "C" void glNormal3fv();
extern "C" void glNormalPointer();
extern "C" void glOrtho();
extern "C" void glPixelStorei();
extern "C" void glPixelZoom();
extern "C" void glPolygonMode();
extern "C" void glPopAttrib();
extern "C" void glPopMatrix();
extern "C" void glProgramEnvParameter4fvARB();
extern "C" void glProgramStringARB();
extern "C" void glPushAttrib();
extern "C" void glPushMatrix();
extern "C" void glReadBuffer();
extern "C" void glReadPixels();
extern "C" void glScalef();
extern "C" void glScissor();
extern "C" void glSecondaryColor3f();
extern "C" void glSecondaryColor3ubv();
extern "C" void glSecondaryColorPointer();
extern "C" void glShadeModel();
extern "C" void glStencilFunc();
extern "C" void glStencilMask();
extern "C" void glStencilOp();
extern "C" void glTexCoord4f();
extern "C" void glTexCoordPointer();
extern "C" void glTexEnvf();
extern "C" void glTexEnvfv();
extern "C" void glTexEnvi();
extern "C" void glTexGenfv();
extern "C" void glTexGeni();
extern "C" void glTexImage2D();
extern "C" void glTexImage3D();
extern "C" void glTexParameterf();
extern "C" void glTexParameteri();
extern "C" void glTexSubImage2D();
extern "C" void glTranslatef();
extern "C" void glUnmapBufferARB();
extern "C" void glVertex3f();
extern "C" void glVertexAttribPointerARB();
extern "C" void glVertexPointer();
extern "C" void glViewport();
extern "C" void glWindowPos2i();
//extern "C" void gmtime();
extern "C" void inet_addr();
extern "C" void inet_ntoa();
extern "C" void ioctl();
/*extern "C" int isalnum(int);
extern "C" int isalpha(int);
extern "C" int isspace(int);
extern "C" int isxdigit(int);*/
//extern "C" void ldexp();
extern "C" void listen();
//extern "C" void localtime();
/*extern "C" void log();
extern "C" void log10();
extern "C" void logf();*/
//extern "C" void longjmp();
extern "C" void mach_absolute_time();
extern "C" void mach_timebase_info();
//extern "C" void malloc();
//extern "C" void memchr();
//extern "C" void memcmp();
//extern "C" void memcpy();
//extern "C" void memmove();
//extern "C" void memset();
//extern "C" void mktime();
//extern "C" void mmap();
//extern "C" void modff();
/*extern "C" void mprotect();
extern "C" void munmap();
extern "C" void nanosleep();*/
extern "C" void p2cstrcpy();
/*extern "C" void pow();
extern "C" void powf();*/
/*extern "C" void printf();
extern "C" void pthread_cond_broadcast();
extern "C" void pthread_cond_destroy();
extern "C" void pthread_cond_init();
extern "C" void pthread_cond_signal();
extern "C" void pthread_cond_timedwait();
extern "C" void pthread_cond_wait();
extern "C" void pthread_create();
extern "C" void pthread_exit();
extern "C" void pthread_join();
extern "C" void pthread_mutex_destroy();
extern "C" void pthread_mutex_init();
extern "C" void pthread_mutex_lock();
extern "C" void pthread_mutex_trylock();
extern "C" void pthread_mutex_unlock();
extern "C" void pthread_mutexattr_destroy();
extern "C" void pthread_mutexattr_init();
extern "C" void pthread_mutexattr_settype();
extern "C" void pthread_self();
extern "C" void puts();
extern "C" void qsort();
extern "C" void rand();
extern "C" void realloc();*/
extern "C" void recv();
extern "C" void recvfrom();
extern "C" void select();
extern "C" void send();
extern "C" void sendto();
//extern "C" void setjmp();
//extern "C" void setlocale();
extern "C" void setrlimit();
extern "C" void setsockopt();
extern "C" void shutdown();
/*extern "C" void sin();
extern "C" void sinf();*/
extern "C" void sk_num();
extern "C" void sk_value();
//extern "C" void snprintf();
extern "C" void socket();
/*extern "C" void sprintf();
extern "C" void srand();
extern "C" void sscanf();
extern "C" void strcasecmp();
extern "C" void strcat();*/
//extern "C" void strchr();
/*extern "C" void strcmp();
extern "C" void strcoll();
extern "C" void strcpy();
extern "C" void strcspn();
extern "C" void strerror();
extern "C" void strftime();*/
extern "C" void strlcpy();
/*extern "C" void strlen();
extern "C" void strncat();
extern "C" void strncmp();
extern "C" void strncpy();*/
extern "C" void strnstr();
//extern "C" void strpbrk();
//extern "C" void strrchr();
//extern "C" void strspn();
extern "C" void strstr();
/*extern "C" void strtod();
extern "C" void strtol();
extern "C" void strtoul();
extern "C" void swprintf();
extern "C" void system();*/
/*extern "C" void tan();
extern "C" void tanf();*/
//extern "C" void time();
extern "C" void times();
/*extern "C" void tmpfile();
extern "C" void tolower();
extern "C" void toupper();*/
//extern "C" void towlower();
extern "C" void tzset();
/*extern "C" void ungetc();
extern "C" void usleep();*/
extern "C" void utime();
/*extern "C" void vsnprintf();
extern "C" void vsprintf();
extern "C" void wcscpy();
extern "C" void wcslen();
extern "C" void wcsncpy();*/
extern "C" void wcsrchr();

extern "C" void CRYPTO_add_lock();
extern "C" void CRYPTO_num_locks();
extern "C" void CRYPTO_set_dynlock_create_callback();
extern "C" void CRYPTO_set_dynlock_destroy_callback();
extern "C" void CRYPTO_set_dynlock_lock_callback();
extern "C" void CRYPTO_set_id_callback();
extern "C" void CRYPTO_set_locking_callback();

extern "C" void SSL_CTX_ctrl();
extern "C" void SSL_CTX_free();
extern "C" void SSL_CTX_load_verify_locations();
extern "C" void SSL_CTX_new();
extern "C" void SSL_CTX_set_cipher_list();
extern "C" void SSL_CTX_set_default_verify_paths();
extern "C" void SSL_CTX_set_tmp_dh_callback();
extern "C" void SSL_CTX_set_verify();
extern "C" void SSL_CTX_set_verify_depth();
extern "C" void SSL_SESSION_free();
extern "C" void SSL_accept();
extern "C" void SSL_clear();
extern "C" void SSL_connect();
extern "C" void SSL_ctrl();
extern "C" void SSL_free();
extern "C" void SSL_get1_session();
extern "C" void SSL_get_peer_certificate();
extern "C" void SSL_get_shutdown();
extern "C" void SSL_get_verify_result();
extern "C" void SSL_library_init();
extern "C" void SSL_new();
extern "C" void SSL_read();
extern "C" void SSL_set_bio();
extern "C" void SSL_set_session();
extern "C" void SSL_shutdown();
extern "C" void SSL_write();
extern "C" void SSLv23_client_method();
extern "C" void SSLv23_method();
extern "C" void SSLv23_server_method();